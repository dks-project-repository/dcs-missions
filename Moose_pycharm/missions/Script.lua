---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Kyedl.
--- DateTime: 10/7/2023 11:43 PM
---

MESSAGE:New("*** SCRIPT LOADED ***", 5):ToAll()

_SETTINGS:SetPlayerMenuOff();

SAR_Players = {}

local function MenuActionDelegate(group)
    MESSAGE:New("Test Message " .. group:GetPlayerName(), 10):ToGroup(group)
end

local function InitiatorToPlayerGroup(initiator)
    local group = initiator:getGroup()
    local groupName = group:getName()
    local playerGroup = GROUP:FindByName(groupName)
    return playerGroup
end

RescuePlayer_OnEnter = {}
function RescuePlayer_OnEnter:onEvent(EventData)
    if EventData == nil or EventData.initiator == nil then
        return false
    end
    if EventData.id == EVENTS.PlayerEnterAircraft then
        local playerGroup = InitiatorToPlayerGroup(EventData.initiator)
        MENU_GROUP_COMMAND:New(playerGroup, "Test Message", nil, MenuActionDelegate, playerGroup)
        SAR_Players[playerGroup:GetPlayerName()] = playerGroup
        MESSAGE:New("Welcome " .. playerGroup:GetPlayerName(), 10):ToGroup(playerGroup)
    end
end
world.addEventHandler(RescuePlayer_OnEnter)

RescuePlayer_OnLeave = {}
function RescuePlayer_OnLeave:onEvent(EventData)
    if EventData == nil or EventData.initiator == nil then
        return false
    end
    if EventData.id == EVENTS.PlayerLeaveUnit then
        local playerGroup = InitiatorToPlayerGroup(EventData.initiator)
        MENU_GROUP_COMMAND:New(playerGroup, "Test Message", nil, MenuActionDelegate, playerGroup)
        --local playerName = initiator:getPlayerName() or "Player"
        MESSAGE:New("Welcome " .. playerGroup:GetPlayerName(), 10):ToGroup(playerGroup)
    end
end
world.addEventHandler(RescuePlayer_OnLeave)

RescuePlayer_OnLeave = {}
function RescuePlayer_OnLeave:onEvent(EventData)
    if EventData == nil or EventData.initiator == nil then
        return false
    end
    if EventData.id == EVENTS.Unit then
        local playerGroup = InitiatorToPlayerGroup(EventData.initiator)
        MENU_GROUP_COMMAND:New(playerGroup, "Test Message", nil, MenuActionDelegate, playerGroup)
        local playerName = playerGroup:getPlayerName()
        SAR_Players[playerName] = playerGroup
        --local playerName = initiator:getPlayerName() or "Player"
        MESSAGE:New("Welcome " .. playerName, 10):ToGroup(playerGroup)
    end
end
world.addEventHandler(RescuePlayer_OnLeave)

GroundSpawnZones = { ZONE:New("New Trigger Zone-1") }
GroundUnitTemplates = { "Ground-1" }

SpawnIndex = 1;
function SpawnSomething()
    ---- RANDOM Vec2 within zone
    local RandomPositionInZone = GroundSpawnZones[1]:GetRandomPointVec2()
    -- make sure the vec2 is not null
    if (RandomPositionInZone == nil) then
        return
    end
    ---- Group Template

    local SpawnGroundUnit1 = SPAWN
    --:InitLimit(10, 10)
            :NewWithAlias(GroundUnitTemplates[1], "New-" .. SpawnIndex)
            :SpawnFromPointVec2(RandomPositionInZone)
    SpawnIndex = SpawnIndex + 1
    MESSAGE:New("Spawn " .. SpawnIndex, 1):ToAll()
end
SCHEDULER:New(nil, SpawnSomething, {}, 0, 1)

TestZone = ZONE:FindByName("New Trigger Zone-1")
TestZone:SmokeZone(SMOKECOLOR.White, 1)

function ReportPosition()
    for playerName, group in pairs(SAR_Players) do
        if (group ~= nil and playerName ~= nil and group:IsCompletelyInZone(TestZone)) then
            local v2 = group:GetPointVec2()
            local distance = TestZone:Get2DDistance(v2)
            MESSAGE:New(playerName .. " In Zone \n" .. distance, 1):ToAll()
        end
    end
end
--SCHEDULER:New(nil, ReportPosition, {}, 0, 1)

function ReportClosestUnit()
    for playerName, group in pairs(SAR_Players) do
        if (group ~= nil and playerName ~= nil and group:IsCompletelyInZone(TestZone)) then
            local v2 = group:GetPointVec2()
            local Closest = v2:FindClosestUnit(10000)
            if (not Closest) then
                return
            end
            local ClosestPoint = Closest:GetPointVec2()
            POINT_VEC2:FindClosestUnit()
            local distance = ClosestPoint:Get2DDistance(v2)
            MESSAGE:New(playerName .. " In Zone \n" .. distance, 1):ToAll()
        end
    end
end
SCHEDULER:New(nil, ReportClosestUnit, {}, 0, 1)











